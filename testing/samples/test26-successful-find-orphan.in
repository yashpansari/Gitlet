# Test the find command when it finds commits that are no longer
# on any branch.
# Set up one commit with two files.
# Initialize and add two files.
# Standard commands and definitions
> init
<<<
D DATE "Date: \w\w\w \w\w\w \d+ \d\d:\d\d:\d\d \d\d\d\d [-+]\d\d\d\d"
# A status log header RE.  Captures the commit id in its sole group.
D COMMIT_HEAD "commit ([a-f0-9]+)[ \t]*\n(?:Merge:\s+[0-9a-f]{7}\s+[0-9a-f]{7}[ ]*\n)?${DATE}"
# A full log entry.  Captures the entry. Assume logs messages don't contain
# "==="
D COMMIT_LOG "(===[ ]*\ncommit [a-f0-9]+[ ]*\n(?:Merge:\s+[0-9a-f]{7}\s+[0-9a-f]{7}[ ]*\n)?${DATE}[ ]*\n(?:.|\n)*?(?=\Z|\n===))"
# An arbitrary line of text (works even with ?s)
D ARBLINE "[^\n]*(?=\n|\Z)"
# Zero or more arbitrary full lines of text.
D ARBLINES "(?:(?:.|\n)*(?:\n|\Z)|\A|\Z)"
+ f.txt wug.txt
+ g.txt notwug.txt
> add g.txt
<<<
> add f.txt
<<<
> commit "Two files"
<<<
> rm f.txt
<<<
> commit "Remove one file"
<<<
> log
===
${COMMIT_HEAD}
Remove one file

===
${COMMIT_HEAD}
Two files

===
${COMMIT_HEAD}
initial commit

<<<*
# UID of initial version
D UID1 "${3}"
# UID of second version
D UID2 "${2}"
# UID of third version
D UID3 "${1}"
> reset ${2}
<<<
> find "Remove one file"
${UID3}
<<<